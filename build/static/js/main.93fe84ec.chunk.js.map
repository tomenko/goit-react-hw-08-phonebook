{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/ContactItem/ContactItem.jsx","components/Filter/Filter.jsx","App.js","redux/store.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","state","payload","filter","item","id","_","combineReducers","axios","defaults","baseURL","getItems","contacts","getFilterValue","getFilteredContactList","createSelector","allContacts","regExp","RegExp","contact","test","name","ContactForm","number","loginInputNameId","nanoid","loginInputNamberId","hendleInputChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","some","alert","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","Component","connect","dispatch","post","then","data","catch","error","addContact","ContactList","children","contactsItems","onDelete","contactID","delete","map","onClick","target","App","fetchItems","length","a","get","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","className","css","document","getElementById"],"mappings":"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","file":"static/js/main.93fe84ec.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactSuccess,\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (state, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(item => item.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,    \r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3001';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest);\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = ({ name, number }) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = contactID => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactID}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactID)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getItems = state => state.contacts.items;\r\n\r\nexport const getFilterValue = state => state.contacts.filter;\r\n\r\nexport const getFilteredContactList = createSelector(\r\n  [getItems, getFilterValue],\r\n  (allContacts, filter) => {\r\n    const regExp = new RegExp(filter, 'gi');\r\n\r\n    if (filter) {\r\n    return allContacts.filter(contact => regExp.test(contact.name));\r\n    }\r\n    return allContacts;\r\n  },\r\n);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addContact, getItems } from '../../redux/contacts';\r\nimport PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid'\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n    \r\n  loginInputNameId = nanoid(); \r\n  loginInputNamberId = nanoid(); \r\n  \r\n  hendleInputChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const addInputValue = contact =>\r\n      contact.name === this.state.name || contact.number === this.state.number;\r\n\r\n    if (this.props.items.some(addInputValue)) {\r\n      alert(`Contact is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    this.props.onSubmit({...this.state})\r\n    this.reset()\r\n  };\r\n    \r\n  reset = () => {\r\n    this.setState({ name: '', number: '' })\r\n  };\r\n  \r\n  render() {\r\n    const { name, number } = this.state;\r\n      \r\n    return (\r\n      <form onSubmit = {this.handleSubmit}>\r\n        <label htmlFor={this.loginInputNameId}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            id = {this.loginInputNameId}\r\n            value={name}\r\n            onChange = {this.hendleInputChange}\r\n                \r\n          />\r\n        </label>\r\n\r\n        <label htmlFor={this.loginInputNamberId}>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            id = {this.loginInputNamberId}\r\n            value={number}\r\n            onChange = {this.hendleInputChange}\r\n          />\r\n        </label>\r\n                  \r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  items: getItems(state),\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onSubmit: ({ name, number }) => dispatch(addContact({ name, number })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactForm);","import PropTypes from 'prop-types';\r\n\r\nconst ContactList = ({ children }) => (\r\n  <ul>{children}</ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactList;\r\n\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact, getFilteredContactList } from '../../redux/contacts';\r\n\r\nconst ContactItem = ({ onDelete, contactsItems }) => (\r\n  <>\r\n    {contactsItems.map(({ id, name, number }) => {\r\n      return (\r\n        <li key={id}>\r\n          <p>{`${name}: ${number}`}</p>\r\n          <button type=\"button\" onClick={() => onDelete(id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  contactsItems: getFilteredContactList(state),\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onDelete: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactItem);\r\n\r\nContactItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDelete: PropTypes.func,\r\n};","import { connect } from 'react-redux';\r\nimport { changeFilter, getFilterValue } from '../../redux/contacts';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label>\r\n    Find contacts by name\r\n    <input type=\"text\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: getFilterValue(state),\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onChange: event => dispatch(changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(Filter);\r\n\r\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport ContactForm from './components/ContactForm'\nimport ContactList from './components/ContactList'\nimport ContactItem from './components/ContactItem';\nimport Filter from './components/Filter'\n\nimport { fetchContacts } from './redux/contacts/contacts-operations';\nimport { getItems } from './redux/contacts/contacts-selectors';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchItems();\n  }\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm/>\n        <h2>Contacts</h2>\n  \n        {this.props.items.length > 0 ? (\n          <>\n            <Filter />\n            <ContactList>\n              <ContactItem />\n            </ContactList>\n          </>\n        ) : (\n          <span>You have no contacts!</span>\n        )}\n      </>\n    )\n  }\n};\n\n/* const mapStateToProps = state => ({\n  items: state.contacts.items,\n}); */\n\nconst mapStateToProps = state => ({\n  items: getItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchItems: () => dispatch(fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  /* persistStore, */\r\n  /* persistReducer, */\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n/* import storage from 'redux-persist/lib/storage'; */\r\nimport contactsReducer from './contacts';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n/* const contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n}; */\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer/* persistReducer(contactsPersistConfig, contactsReducer) */,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n/* const persistor = persistStore(store); */\r\n\r\n/* export default { store, persistor }; */\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n/* import { PersistGate } from 'redux-persist/integration/react'; */\nimport App from './App';\nimport store from './redux/store';\n\nimport css from './index.module.css';\n//шаг 2\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store/* .store */}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App className = {css}/>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n//шаг 2\n/* ReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App className = {css}/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n); */"],"sourceRoot":""}